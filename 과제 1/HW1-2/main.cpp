/*
  파일명 : "실습1-2_21912193_신대홍"
  프로그램의 목적 및 기본 기능:
	- 숫자를 각각 10진수, 8진수, 16진수, 2진수로 표현하는 프로그램

  프로그램 작성자 : 신대홍(2022년 8월 29일)
  최종 Update : Version 1.0.0, 2022년 8월 29일 (신대홍)
===========================================================================================================
					프로그램 수정/보완 이력
===========================================================================================================
   수정자		   수정일		 버전			     수정/보완내용
-----------------------------------------------------------------------------------------------------------
   신대홍		 2022/08/29		v1.0.0		  최초작성
   신대홍		 2022/08/30		v1.0.1		  최초작성
===========================================================================================================
*/

#include <iostream>
#include <iomanip>
#include <bitset>								// 2진수를 표현하는데 필요한 라이브러리가 담긴 bitset

using namespace std;

void binarybitprint(int i);						// 2진수를 표현해주는 함수

int main()
{
	/*					>> 출력 형식 <<
			- (10진수) (8진수) (16진수) (2진수(8자리))	
															*/
	for (int i = 0; i <= 32; i++)
	{
		cout << showbase << internal					// showbase : 접두어를 보여주는 기능
														// internal : 자리수를 확보하여 출력 할때, 접두어를 최우측에 출력함
			<< setw(8) << dec << i						// dec : 접두어를 보여주지 않음. 10진수 형태로 출력
			<< setw(8) << oct << i						// oct : 8진수형태로 출력
			<< right << setw(8) << hex << i				// hex : 16진수 형태로 출력, 우정렬을 한 후 출력함.
			<< setw(11) << dec << bitset<8>(i) << endl;	// bitset<8> : 8자리 비트수를 확보한 후, 2진수로 출력, 접두어는 dec로 생략함.
	}

	//for (int i = 0; i <= 32; i++)
	//{
	//	cout << showbase << internal					// showbase : 접두어를 보여주는 기능
	//		// internal : 자리수를 확보하여 출력 할때, 접두어를 최우측에 출력함
	//		<< setw(8) << dec << i						// dec : 접두어를 보여주지 않음. 10진수 형태로 출력
	//		<< setw(8) << oct << i						// oct : 8진수형태로 출력
	//		<< right << setw(8) << hex << i				// hex : 16진수 형태로 출력, 우정렬을 한 후 출력함.
	//		<< dec << "  ";
	//	binarybitprint(i);								// 2진수 출력, 이전에 dec로 접두어 출력을 그만둠
	//}
	return 0;
}

void binarybitprint(int i)					// 2진수를 표현해주는 함수
{
	for (int j = 8; j >= 0; j--)
	{
		cout << ((i >> j) & 1);				// 출력은 왼쪽부터 시작하므로 기존 숫자를 처음엔 8자리를 비트시프트 한 후,
											// 1과 AND한 값을 출력, 그 후, 비트시프트를 줄이면서 함.
	}
	cout << endl;							// 마지막은 ENTER
}